1.Component trong react là gì?  có những loại component nào 
- Trong React, các comp hoạt động giống như các hàm trả về các thành phần HTML 
- Các component là độc lập và có thể sử dụng lại
- Có 2 loại component là : 
	- function component
	- class component

3. State là gì? 
- state là 1 obj chứa dữ liệu hoặc thông tin về components
- state có thể được thay đổi bất cứ lúc nào
- state chỉ tồn tại trong component chứa nó
- mỗi khi state thay đổi thì component sẽ bị re render lại

4. Props là gì ? 
- props thực chất là viết tắt của properties
- props là cách để có thể truyền dữ liệu từ component cha xuống comp con và ngược lại 
- props không nên bị thay đổi dữ liệu (có thể thay đổi được bằng cách sử dụng setProps hay replaceProps
nhưng không được React khuyến khích
- props là 1 js object , mô tả cho component mà chúng ta tạo ra

- children props
 + 
)


5. HOC là gì 
- HOC - Higher-order component là 1 kĩ thuật nâng cao trong ReactJs được sử dụng trong việc chia sẻ logic giữa các comp
- HOC là 1 hàm và nó nhận đối số là 1 component và trả về 1 component mới

Ý nghĩa:
HOC hữu ích trong việc chia sẽ chức năng như xác thực, lấy dữ liệu hoặc quản lí trạng thái mà không cần phải sửa đổi trực tiếp các comp
Giúp code tái sử dụng, dễ bảo trì và giảm phức tạp khi làm việc với nhiều comp có cùng logic
- HOC được sử dụng trong Redux hay React-dependencies

-----VÍ DỤ MINH HOẠ ----

# Tạo comp

const UserProfile = ({ username, extraInfo }) => (
  <div>
    <h2>User Profile</h2>
    <p>Username: {username}</p>
    <p>Extra Info: {extraInfo}</p>
  </div>
);

export default UserProfile;

# Tạo HOC để kiểm tra người dùng đã đăng nhập chưa

import React from 'react';

const withAuthentication = (WrappedComponent) => {
  return class extends React.Component {
    render() {
      const { isAuthenticated, ...otherProps } = this.props;

      if (!isAuthenticated) {
        return <p>Vui lòng đăng nhập để xem thông tin người dùng.</p>;
      }

      // Nếu đã đăng nhập, render WrappedComponent với các prop còn lại
      return <WrappedComponent {...otherProps} />;
    }
  };
};

export default withAuthentication;

#  Sử dụng HOC để tạo component mới

import React from 'react';
import UserProfile from './UserProfile';
import withAuthentication from './withAuthentication';

const UserProfileWithAuth = withAuthentication(UserProfile);

function App() {
  return (
    <div>
      {/* Khi không có xác thực */}
      <UserProfileWithAuth isAuthenticated={false} username="John Doe" />

      {/* Khi có xác thực */}
      <UserProfileWithAuth isAuthenticated={true} username="Jane Doe" />
    </div>
  );
}

export default App;


6. Render props là gì,
Render props là 1 kỹ thuật trong ReactJs, trong đó 1 component nhận 1 props là 1 function và sử dụng nó 
để render nội dung đông, thay vì chỉ nhận data và render, component có thể linh hoạt quyết định cách render dựa trên logic
mà hàm được truyền vào

Ý nghĩa của render props
Với render props bạn có thể dễ dàng chia sẻ logic giữa các component mà không cần sử dụng HOC hay sử dụng nhiều comp lồng nhau
Điều này sẽ giúp code dễ quản lí và tái sử dụng tốt hơn

- Tạo Component MouseTracker sử dụng render props
function MouseTracker(props) {
  const [position, setPosition] = useState({ x: 0, y: 0 });

  // Hàm xử lý di chuyển chuột
  const handleMouseMove = (event) => {
    setPosition({
      x: event.clientX,
      y: event.clientY,
    });
  };

  return (
    <div style={{ height: '300px', border: '1px solid black' }} onMouseMove={handleMouseMove}>
      {/* Gọi hàm render từ props để render nội dung */}
      {props.render(position)}
    </div>
  );
}

- Sử dụng Component MouseTracker với Render props
function App() {
  return (
    <div>
      <h1>Mouse Tracker Example</h1>
      <MouseTracker
        render={(position) => (
          <h3>Mouse position: ({position.x}, {position.y})</h3>
        )}
      />
    </div>
  );
}



6. Custom hook ? 
- Custom hook là những hooks mà mình tự định nghĩa với mục đích thực hiện chức năng nào đó,
- Khi đặt tên 1 custom hooks thì phải có từ khóa use ở đầu 
- Custom hook thường được dùng trong TH muốn tách biệt các phần xử lí logic riêng ra khỏi UI , 
hay chia sẻ logic giữa các component

e: React.UIEvent<HTMLDivElement, UIEvent>

7. Dùng state thế nào cho hiệu quả?
- dùng cho chính component đó thì viết theo kiểu component state
- dùng cho nhiều component thì dùng global state ( redux, context)

8. Chia component thế nào cho hiệu quả ? 
- có 2 loại component là : 
   + Container (hay còn gọi là smart component)
	- là component chỉ quản lí, cung cấp dữ liệu (lấy dữ liệu từ server, chuẩn bị dữ liệu tĩnh) 
        - không quan tâm đến render UI như thế nào, chỉ quan tâm đến render cái gì mà thôi,
   + Component (hay còn gọi là dumb component)
	- cho cái gì render cái đó
        - không biết dữ liệu đến từ đâu
	- thường chỉ có props, không có state
	- tái sử dụng với các props khác nhau 

9. Virtual DOM:
Virtual DOM (VDOM hay DOM ảo) , 
là cách thể hiện DOM thật của một trang web dưới dạng các Javascript object.
Khi thay đổi state của app thì VDOM sẽ được cập nhật lại và so sánh với VDOM cũ
(VDOM cũ được đồng bộ hóa với DOM thật trước đó)
bằng thuật toán gọi là diffing hay change detection để tìm ra những node cần thay đổi.
Cuối cùng nó sẽ cập nhật những node đó trên DOM thật.

10. Khi nào nên dùng redux
- state có share giữa nhiều component hay không? 
 -> NO : dùng useState, useReducer (phức tạp thì dùng useReducer, đơn giản thì dùng useState)
 -> YES : nếu có thì nó có thay đổi thường xuyên không ? 
	 ++ nếu không thay đổi thường xuyên dùng useContext (vì nếu giá trị của context thay đổi thì sẽ trigger render lại những thằng con bên dưới)
	 ++ nếu có thì có liên quan đến server state không (server state có nghĩa là bạn phải đi fetch API, API trả về thông tin và bạn phải lưu lại thông tin đó)
    	++ Nếu có liên quan thì dùng Apollo , React Query (recommend from React site) hoặc swr (với NextJS)
    	++ Nếu không liên quan đến server state thì dùng Redux

10. có nên set state trong componentDidUpdate không ?
không nên set, vì có thể dẫn đến trường hợp component bị render liên tục

